class Solution {
public:

    int low_bound(vector<int>& nums,int target){
        int left=0,right=nums.size()-1,ans=nums.size();
        while(left<=right){
            int mid=(left+right)/2;
            if(nums[mid]>=target){
                ans=mid;
                right=mid-1;
            }else left=mid+1;
        }
        return  ans;
    }
    int up_bound(vector<int>& nums, int target){
        int left=0,right=nums.size()-1,ans=nums.size();
        while(left<=right){
            int mid=(left+right)/2;
            if(nums[mid]>target){
                ans=mid;
                right=mid-1;
            }else left=mid+1;
        }
        return ans;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        if(nums.empty())return {-1,-1};

        int lb=low_bound(nums,target);
        if(lb==nums.size()||nums[lb]!=target)return {-1,-1};
        int ub= up_bound(nums,target);
        return {lb,ub-1};
        
    }
};
