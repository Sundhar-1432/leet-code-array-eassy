class Solution {
public:
    int find_max(vector<int>& nums) {
        int mx = INT_MIN;
        for (int i = 0; i < nums.size(); i++) {
            mx = max(mx, nums[i]);
        }
        return mx;
    }
    long long hours(vector<int>& piles, int mid) {
        long long hour = 0;
        for (auto it:piles) {
            hour += ceil((double)it/mid);
        }
        return hour;
    }
    int minEatingSpeed(vector<int>& piles, int h) {
        int low = 1, high = find_max(piles);
        while (low <= high) {
            int mid = low+(high-low) / 2;
            long long hour = hours(piles, mid);
            if (hour <= h) {
                high = mid - 1;
            } else
                low = mid + 1;
        }
        return low;
    }
};
